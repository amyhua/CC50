"use strict";var precacheConfig=[["/index.html","067e8f3e0da82fed5bdc511238ec9d1b"],["/static/css/main.1e828c2c.css","6b5784408529411278e2c5bfdbdf4db9"],["/static/js/main.71d0d07f.js","51bbbf3c8ed777bac672531ffd17a1a1"],["/static/media/caret-down-dark.5e858706.svg","5e858706a16f558ee588304d1a2a9ee5"],["/static/media/caret-down.7fafe8e3.svg","7fafe8e335d5d3a16a9c98ff49943822"],["/static/media/caret-left.bf9ae433.svg","bf9ae433fd855d85ed8fb9715f323ee8"],["/static/media/caret-right.8f1aab7c.svg","8f1aab7ccc0d4dc83af08f5fb38962f0"],["/static/media/cc-logo.d279cf46.png","d279cf467c6cce0c01bbb5f8e139e3fb"],["/static/media/grid-view-active-gold.fd3d9b44.svg","fd3d9b44063f143d45be0d1b25424d60"],["/static/media/grid-view-active.7a2f37f3.svg","7a2f37f37bbe08222f5b185ed27ba963"],["/static/media/grid-view-inactive.a0cb7827.svg","a0cb78277d185b43e1b7e1e5d7bec47b"],["/static/media/icon-facebook.48f0f405.svg","48f0f4055e85952b6d718a85e26e89dc"],["/static/media/icon-new-window.695dec29.svg","695dec299570769fbf50297eed6f121e"],["/static/media/icon-search.157044df.svg","157044df6de16bce7a9e5284827524dd"],["/static/media/icon-tumblr.54f08769.svg","54f08769ae9f1e8980a35d12bebe821f"],["/static/media/icon-twitter.d6b3bcb7.svg","d6b3bcb73fbf18876f0ed256c493b592"],["/static/media/list-view-active-gold.c04aa229.svg","c04aa229a4ed320eff54595c30ef9ca9"],["/static/media/list-view-active.a2e7e53b.svg","a2e7e53b3205db254d22723046e39083"],["/static/media/list-view-inactive.f7a75fb6.svg","f7a75fb6de264fb6c0914af7291f1e52"]],cacheName="sw-precache-v3-sw-precache-webpack-plugin-"+(self.registration?self.registration.scope:""),ignoreUrlParametersMatching=[/^utm_/],addDirectoryIndex=function(e,t){var a=new URL(e);return"/"===a.pathname.slice(-1)&&(a.pathname+=t),a.toString()},cleanResponse=function(t){return t.redirected?("body"in t?Promise.resolve(t.body):t.blob()).then(function(e){return new Response(e,{headers:t.headers,status:t.status,statusText:t.statusText})}):Promise.resolve(t)},createCacheKey=function(e,t,a,n){var r=new URL(e);return n&&r.pathname.match(n)||(r.search+=(r.search?"&":"")+encodeURIComponent(t)+"="+encodeURIComponent(a)),r.toString()},isPathWhitelisted=function(e,t){if(0===e.length)return!0;var a=new URL(t).pathname;return e.some(function(e){return a.match(e)})},stripIgnoredUrlParameters=function(e,a){var t=new URL(e);return t.hash="",t.search=t.search.slice(1).split("&").map(function(e){return e.split("=")}).filter(function(t){return a.every(function(e){return!e.test(t[0])})}).map(function(e){return e.join("=")}).join("&"),t.toString()},hashParamName="_sw-precache",urlsToCacheKeys=new Map(precacheConfig.map(function(e){var t=e[0],a=e[1],n=new URL(t,self.location),r=createCacheKey(n,hashParamName,a,/\.\w{8}\./);return[n.toString(),r]}));function setOfCachedUrls(e){return e.keys().then(function(e){return e.map(function(e){return e.url})}).then(function(e){return new Set(e)})}self.addEventListener("install",function(e){e.waitUntil(caches.open(cacheName).then(function(n){return setOfCachedUrls(n).then(function(a){return Promise.all(Array.from(urlsToCacheKeys.values()).map(function(t){if(!a.has(t)){var e=new Request(t,{credentials:"same-origin"});return fetch(e).then(function(e){if(!e.ok)throw new Error("Request for "+t+" returned a response with status "+e.status);return cleanResponse(e).then(function(e){return n.put(t,e)})})}}))})}).then(function(){return self.skipWaiting()}))}),self.addEventListener("activate",function(e){var a=new Set(urlsToCacheKeys.values());e.waitUntil(caches.open(cacheName).then(function(t){return t.keys().then(function(e){return Promise.all(e.map(function(e){if(!a.has(e.url))return t.delete(e)}))})}).then(function(){return self.clients.claim()}))}),self.addEventListener("fetch",function(t){if("GET"===t.request.method){var e,a=stripIgnoredUrlParameters(t.request.url,ignoreUrlParametersMatching),n="index.html";(e=urlsToCacheKeys.has(a))||(a=addDirectoryIndex(a,n),e=urlsToCacheKeys.has(a));var r="/index.html";!e&&"navigate"===t.request.mode&&isPathWhitelisted(["^(?!\\/__).*"],t.request.url)&&(a=new URL(r,self.location).toString(),e=urlsToCacheKeys.has(a)),e&&t.respondWith(caches.open(cacheName).then(function(e){return e.match(urlsToCacheKeys.get(a)).then(function(e){if(e)return e;throw Error("The cached response that was expected is missing.")})}).catch(function(e){return console.warn('Couldn\'t serve response for "%s" from cache: %O',t.request.url,e),fetch(t.request)}))}});